// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  enterprise     String?
  email          String?  @unique
  emailverified  String?
  hashedPassword String?
  createAt       DateTime @default(now())
  updatedAt      DateTime @updatedAt
  logo           String?

  stores Store[]
}

model Store {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String @db.ObjectId
  owner   User   @relation(fields: [ownerId], references: [id])

  billboard Billboard[]
  category  Category[]
  size      Size[]
  color     Color[]
  product   Product[]
}

model Billboard {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  label    String
  imageUrl String

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId   String   @db.ObjectId
  store     Store    @relation(fields: [storeId], references: [id])

  category Category[]
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId
  store       Store     @relation(fields: [storeId], references: [id])
  billboardId String    @db.ObjectId
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  createAt    DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  product Product[]
}

model Size {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     String
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId   String   @db.ObjectId
  store     Store    @relation(fields: [storeId], references: [id])

  product Product[]
}

model Color {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     String
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId   String   @db.ObjectId
  store     Store    @relation(fields: [storeId], references: [id])

  product Product[]
}

model Product {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  price      Float
  isfeatured Boolean  @default(false)
  isArchived Boolean  @default(false)
  createAt   DateTime @default(now())
  updatedAt  DateTime @updatedAt
  storeId    String   @db.ObjectId
  store      Store    @relation(fields: [storeId], references: [id])
  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
  sizeId     String   @db.ObjectId
  size       Size     @relation(fields: [sizeId], references: [id])
  colorId    String   @db.ObjectId
  color      Color    @relation(fields: [colorId], references: [id])

  image Image[]
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String   @db.ObjectId

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
